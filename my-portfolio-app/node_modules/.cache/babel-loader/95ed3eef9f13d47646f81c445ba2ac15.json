{"ast":null,"code":"var _jsxFileName = \"/Users/andrewzamora/Documents/06-15-remo-java-ADV/weektwo/DayThree/my-portfolio-app/src/components/Contact.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./Contact.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst required = \"This field is required\";\nconst maxLength = \"Your input exceed maximum length\";\n\nconst errorMessage = error => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"invalid-feedback\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 12\n  }, this);\n};\n\nexport default function Contact() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => console.log(data);\n\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(ValidatorForm, {\n    ref: r => this.form = r,\n    onSubmit: this.handleSubmit,\n    instantValidate: false,\n    children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n      ref: this.nameRef,\n      name: \"name\",\n      label: \"name\",\n      value: data.name,\n      onBlur: this.handlenameBlur,\n      onChange: this.handleValue,\n      validators: [\"isname\", \"required\"],\n      errorMessages: [\"wrong name\", \"this field is required\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n      ref: this.emailRef,\n      name: \"email\",\n      label: \"email\",\n      value: data.email,\n      onBlur: this.handleBlur,\n      onChange: this.handleValue,\n      validators: [\"isEmail\", \"required\"],\n      errorMessages: [\"wrong email\", \"this field is required\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n      ref: this.phoneRef,\n      name: \"phone\",\n      label: \"phone\",\n      value: data.phone,\n      onBlur: this.handlephoneBlur,\n      onChange: this.handleValue,\n      validators: [\"isphone\", \"required\"],\n      errorMessages: [\"wrong phone number\", \"this field is required\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => this.form.submit(),\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contact, \"HLC1IFclXfL/K+q6lxeDS/Po7Wk=\", false, function () {\n  return [useForm];\n});\n\n_c = Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/Users/andrewzamora/Documents/06-15-remo-java-ADV/weektwo/DayThree/my-portfolio-app/src/components/Contact.jsx"],"names":["React","useForm","Button","TextValidator","ValidatorForm","required","maxLength","errorMessage","error","Contact","register","handleSubmit","formState","errors","onSubmit","data","console","log","r","form","nameRef","name","handlenameBlur","handleValue","emailRef","email","handleBlur","phoneRef","phone","handlephoneBlur","submit"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,eAAP;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;;AAIA,MAAMC,QAAQ,GAAG,wBAAjB;AACE,MAAMC,SAAS,GAAG,kCAAlB;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBAAO;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,cAAmCA;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;AAKF,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFZ,OAAO,EAJX;;AAMA,QAAMa,QAAQ,GAAIC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAA3B;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAEA,sBACE,QAAC,aAAD;AACE,IAAA,GAAG,EAAEK,CAAC,IAAK,KAAKC,IAAL,GAAYD,CADzB;AAEE,IAAA,QAAQ,EAAE,KAAKP,YAFjB;AAGE,IAAA,eAAe,EAAE,KAHnB;AAAA,4BAKE,QAAC,aAAD;AACE,MAAA,GAAG,EAAE,KAAKS,OADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,KAAK,EAAEL,IAAI,CAACM,IAJd;AAKE,MAAA,MAAM,EAAE,KAAKC,cALf;AAME,MAAA,QAAQ,EAAE,KAAKC,WANjB;AAOE,MAAA,UAAU,EAAE,CAAC,QAAD,EAAW,UAAX,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,YAAD,EAAe,wBAAf;AARjB;AAAA;AAAA;AAAA;AAAA,YALF,eAeE;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE,QAAC,aAAD;AACE,MAAA,GAAG,EAAE,KAAKC,QADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,KAAK,EAAET,IAAI,CAACU,KAJd;AAKE,MAAA,MAAM,EAAE,KAAKC,UALf;AAME,MAAA,QAAQ,EAAE,KAAKH,WANjB;AAOE,MAAA,UAAU,EAAE,CAAC,SAAD,EAAY,UAAZ,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,aAAD,EAAgB,wBAAhB;AARjB;AAAA;AAAA;AAAA;AAAA,YAhBF,eA0BE;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE,QAAC,aAAD;AACE,MAAA,GAAG,EAAE,KAAKI,QADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,KAAK,EAAEZ,IAAI,CAACa,KAJd;AAKE,MAAA,MAAM,EAAE,KAAKC,eALf;AAME,MAAA,QAAQ,EAAE,KAAKN,WANjB;AAOE,MAAA,UAAU,EAAE,CAAC,SAAD,EAAY,UAAZ,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,oBAAD,EAAuB,wBAAvB;AARjB;AAAA;AAAA;AAAA;AAAA,YA3BF,eAqCE;AAAA;AAAA;AAAA;AAAA,YArCF,eAsCE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKJ,IAAL,CAAUW,MAAV,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;GApDuBrB,O;UAKlBR,O;;;KALkBQ,O","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./Contact.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\n\n\n\nconst required = \"This field is required\";\n  const maxLength = \"Your input exceed maximum length\";\n  const errorMessage = (error) => {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  };\n\n\nexport default function Contact() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  \n  const onSubmit = (data) => console.log(data);\n  console.log(errors);\n\n  return (\n    <ValidatorForm\n      ref={r => (this.form = r)}\n      onSubmit={this.handleSubmit}\n      instantValidate={false}\n    >\n      <TextValidator\n        ref={this.nameRef}\n        name=\"name\"\n        label=\"name\"\n        value={data.name}\n        onBlur={this.handlenameBlur}\n        onChange={this.handleValue}\n        validators={[\"isname\", \"required\"]}\n        errorMessages={[\"wrong name\", \"this field is required\"]}\n      />\n      <br />\n      <TextValidator\n        ref={this.emailRef}\n        name=\"email\"\n        label=\"email\"\n        value={data.email}\n        onBlur={this.handleBlur}\n        onChange={this.handleValue}\n        validators={[\"isEmail\", \"required\"]}\n        errorMessages={[\"wrong email\", \"this field is required\"]}\n      />\n      <br />\n      <TextValidator\n        ref={this.phoneRef}\n        name=\"phone\"\n        label=\"phone\"\n        value={data.phone}\n        onBlur={this.handlephoneBlur}\n        onChange={this.handleValue}\n        validators={[\"isphone\", \"required\"]}\n        errorMessages={[\"wrong phone number\", \"this field is required\"]}\n      />\n      <br />\n      <Button onClick={() => this.form.submit()}>submit</Button>\n    </ValidatorForm>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}